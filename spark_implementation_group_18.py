# -*- coding: utf-8 -*-
"""Spark_Implementation_Group_18.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FHGVd3YMg_nBsI3DzZmUL8VGAzNrYxoS
"""

!apt-get install openjdk-8-jdk-headless -qq > /dev/null
!wget -q http://archive.apache.org/dist/spark/spark-3.1.1/spark-3.1.1-bin-hadoop3.2.tgz
!tar xf spark-3.1.1-bin-hadoop3.2.tgz
!pip install -q findspark

import os
os.environ["JAVA_HOME"] = "/usr/lib/jvm/java-8-openjdk-amd64"
os.environ["SPARK_HOME"] = "/content/spark-3.1.1-bin-hadoop3.2"
!ls

#Import numpy
import numpy

#Import findspark
import findspark
findspark.init()

#Create a spark session
from pyspark.sql import SparkSession
spark = SparkSession.builder.master("local[*]").getOrCreate()
spark.conf.set("spark.sql.repl.eagerEval.enabled", True) # Property used to format output tables better


#Creating spark context-Its like connecting to spark cluster
from pyspark import SparkConf 
from pyspark.context import SparkContext

#Import mean
from pyspark.sql.functions import mean 

sc = SparkContext.getOrCreate(SparkConf().setMaster("local[*]"))

#Upload Data
from google.colab import files
uploaded = files.upload()

#Import Data
df = spark.read.csv("MOCK_DATA.csv", header=True, inferSchema=True)

#Select first 5 rows with columns: first_name, gender, age & children
df.select("first_name","gender","age","children").show(5)

#Show describe() function on the data
df.describe().show

#Task 1

#Two groups filtered on Age, Cigarettes_per_day and BMI
df_filtered_task_1_group_1 = df.filter("age < 30 AND cigarettes_per_day > 10 AND BMI > 30")

df_filtered_task_1_group_2 = df.filter("age < 30 AND cigarettes_per_day <= 10 AND BMI <= 30")

#Mean healthcare costs for people below 30, more than 10 cigarettes per day and BMI above 30
print(df_filtered_task_1_group_1.select(mean("monthly_charges")))

#Mean healthcare cost for people below 30, less than or equal to 10 cigarettes per day and BMI lower or equal to 30
print(df_filtered_task_1_group_2.select(mean("monthly_charges")))

#Task 2

#Filter on high SBP and BPM and low montly_income( group 1)
df_filtered_task_2 = df.filter("SBP > 140 AND BPM > 100 AND monthly_income < 2000")

#Count people with high SBP and BPM and low montly_income
print(df_filtered_task_2.count())

#Mean healthcare costs for people with high SBP and BPM and low montly_income
print(df_filtered_task_2.select(mean ("monthly_charges")))

#Show Result on group 1
df_filtered_task_2.show(20)

#Filter on low SBP and BPM and low montly_income (group 2)
df_filtered_task_2_1 = df.filter("SBP < 140 AND BPM < 100 AND monthly_income < 2000")

#Count people with low SBP and BPM and low montly_income
print(df_filtered_task_2_1.count())

# Mean healthcare costs for people with low SBP and BPM and low montly_income
print(df_filtered_task_2_1.select(mean ("monthly_charges")))

#Show Result on group 2
df_filtered_task_2_1.show(20)

#Task 3

#Subset non-sporters
df_task_3_non_sporters = df.filter("weekly_sporting_hours == 0")

#Subset sporters
df_filtered_task_3_sporters = df.filter("weekly_sporting_hours != 0")
df.groupBy("weekly_sporting_hours").agg({"monthly_charges" : "avg"}).show()

#Mean healthcare costs sporters
print(df_filtered_task_3_sporters.select(mean ("monthly_charges")))

#Mean healthcare cost non-sporters
print(df_task_3_non_sporters.select(mean ("monthly_charges")))